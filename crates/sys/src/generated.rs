#![allow(warnings, unused)]
/* automatically generated by rust-bindgen 0.69.4 */

pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 35;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    const UNINIT: ::std::mem::MaybeUninit<__fsid_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
#[doc = " 実行環境に合った適切なハードウェアアクセラレーションモードを選択する"]
pub const VoicevoxAccelerationMode_VOICEVOX_ACCELERATION_MODE_AUTO: VoicevoxAccelerationMode = 0;
#[doc = " ハードウェアアクセラレーションモードを\"CPU\"に設定する"]
pub const VoicevoxAccelerationMode_VOICEVOX_ACCELERATION_MODE_CPU: VoicevoxAccelerationMode = 1;
#[doc = " ハードウェアアクセラレーションモードを\"GPU\"に設定する"]
pub const VoicevoxAccelerationMode_VOICEVOX_ACCELERATION_MODE_GPU: VoicevoxAccelerationMode = 2;
pub type VoicevoxAccelerationMode = i32;
#[doc = " 成功"]
pub const VoicevoxResultCode_VOICEVOX_RESULT_OK: VoicevoxResultCode = 0;
#[doc = " open_jtalk辞書ファイルが読み込まれていない"]
pub const VoicevoxResultCode_VOICEVOX_RESULT_NOT_LOADED_OPENJTALK_DICT_ERROR: VoicevoxResultCode =
    1;
#[doc = " サポートされているデバイス情報取得に失敗した"]
pub const VoicevoxResultCode_VOICEVOX_RESULT_GET_SUPPORTED_DEVICES_ERROR: VoicevoxResultCode = 3;
#[doc = " GPUモードがサポートされていない"]
pub const VoicevoxResultCode_VOICEVOX_RESULT_GPU_SUPPORT_ERROR: VoicevoxResultCode = 4;
#[doc = " スタイルIDに対するスタイルが見つからなかった"]
pub const VoicevoxResultCode_VOICEVOX_RESULT_STYLE_NOT_FOUND_ERROR: VoicevoxResultCode = 6;
#[doc = " 音声モデルIDに対する音声モデルが見つからなかった"]
pub const VoicevoxResultCode_VOICEVOX_RESULT_MODEL_NOT_FOUND_ERROR: VoicevoxResultCode = 7;
#[doc = " 推論に失敗した"]
pub const VoicevoxResultCode_VOICEVOX_RESULT_INFERENCE_ERROR: VoicevoxResultCode = 8;
#[doc = " コンテキストラベル出力に失敗した"]
pub const VoicevoxResultCode_VOICEVOX_RESULT_EXTRACT_FULL_CONTEXT_LABEL_ERROR: VoicevoxResultCode =
    11;
#[doc = " 無効なutf8文字列が入力された"]
pub const VoicevoxResultCode_VOICEVOX_RESULT_INVALID_UTF8_INPUT_ERROR: VoicevoxResultCode = 12;
#[doc = " AquesTalk風記法のテキストの解析に失敗した"]
pub const VoicevoxResultCode_VOICEVOX_RESULT_PARSE_KANA_ERROR: VoicevoxResultCode = 13;
#[doc = " 無効なAudioQuery"]
pub const VoicevoxResultCode_VOICEVOX_RESULT_INVALID_AUDIO_QUERY_ERROR: VoicevoxResultCode = 14;
#[doc = " 無効なAccentPhrase"]
pub const VoicevoxResultCode_VOICEVOX_RESULT_INVALID_ACCENT_PHRASE_ERROR: VoicevoxResultCode = 15;
#[doc = " ZIPファイルを開くことに失敗した"]
pub const VoicevoxResultCode_VOICEVOX_RESULT_OPEN_ZIP_FILE_ERROR: VoicevoxResultCode = 16;
#[doc = " ZIP内のファイルが読めなかった"]
pub const VoicevoxResultCode_VOICEVOX_RESULT_READ_ZIP_ENTRY_ERROR: VoicevoxResultCode = 17;
#[doc = " すでに読み込まれている音声モデルを読み込もうとした"]
pub const VoicevoxResultCode_VOICEVOX_RESULT_MODEL_ALREADY_LOADED_ERROR: VoicevoxResultCode = 18;
#[doc = " すでに読み込まれているスタイルを読み込もうとした"]
pub const VoicevoxResultCode_VOICEVOX_RESULT_STYLE_ALREADY_LOADED_ERROR: VoicevoxResultCode = 26;
#[doc = " 無効なモデルデータ"]
pub const VoicevoxResultCode_VOICEVOX_RESULT_INVALID_MODEL_DATA_ERROR: VoicevoxResultCode = 27;
#[doc = " ユーザー辞書を読み込めなかった"]
pub const VoicevoxResultCode_VOICEVOX_RESULT_LOAD_USER_DICT_ERROR: VoicevoxResultCode = 20;
#[doc = " ユーザー辞書を書き込めなかった"]
pub const VoicevoxResultCode_VOICEVOX_RESULT_SAVE_USER_DICT_ERROR: VoicevoxResultCode = 21;
#[doc = " ユーザー辞書に単語が見つからなかった"]
pub const VoicevoxResultCode_VOICEVOX_RESULT_USER_DICT_WORD_NOT_FOUND_ERROR: VoicevoxResultCode =
    22;
#[doc = " OpenJTalkのユーザー辞書の設定に失敗した"]
pub const VoicevoxResultCode_VOICEVOX_RESULT_USE_USER_DICT_ERROR: VoicevoxResultCode = 23;
#[doc = " ユーザー辞書の単語のバリデーションに失敗した"]
pub const VoicevoxResultCode_VOICEVOX_RESULT_INVALID_USER_DICT_WORD_ERROR: VoicevoxResultCode = 24;
#[doc = " UUIDの変換に失敗した"]
pub const VoicevoxResultCode_VOICEVOX_RESULT_INVALID_UUID_ERROR: VoicevoxResultCode = 25;
pub type VoicevoxResultCode = i32;
#[doc = " 固有名詞。"]
pub const VoicevoxUserDictWordType_VOICEVOX_USER_DICT_WORD_TYPE_PROPER_NOUN:
    VoicevoxUserDictWordType = 0;
#[doc = " 一般名詞。"]
pub const VoicevoxUserDictWordType_VOICEVOX_USER_DICT_WORD_TYPE_COMMON_NOUN:
    VoicevoxUserDictWordType = 1;
#[doc = " 動詞。"]
pub const VoicevoxUserDictWordType_VOICEVOX_USER_DICT_WORD_TYPE_VERB: VoicevoxUserDictWordType = 2;
#[doc = " 形容詞。"]
pub const VoicevoxUserDictWordType_VOICEVOX_USER_DICT_WORD_TYPE_ADJECTIVE:
    VoicevoxUserDictWordType = 3;
#[doc = " 接尾辞。"]
pub const VoicevoxUserDictWordType_VOICEVOX_USER_DICT_WORD_TYPE_SUFFIX: VoicevoxUserDictWordType =
    4;
pub type VoicevoxUserDictWordType = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpenJtalkRc {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VoicevoxSynthesizer {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VoicevoxUserDict {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VoicevoxVoiceModel {
    _unused: [u8; 0],
}
#[doc = " ::voicevox_synthesizer_new のオプション。"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VoicevoxInitializeOptions {
    #[doc = " ハードウェアアクセラレーションモード"]
    pub acceleration_mode: VoicevoxAccelerationMode,
    #[doc = " CPU利用数を指定\n 0を指定すると環境に合わせたCPUが利用される"]
    pub cpu_num_threads: u16,
}
#[test]
fn bindgen_test_layout_VoicevoxInitializeOptions() {
    const UNINIT: ::std::mem::MaybeUninit<VoicevoxInitializeOptions> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VoicevoxInitializeOptions>(),
        8usize,
        concat!("Size of: ", stringify!(VoicevoxInitializeOptions))
    );
    assert_eq!(
        ::std::mem::align_of::<VoicevoxInitializeOptions>(),
        4usize,
        concat!("Alignment of ", stringify!(VoicevoxInitializeOptions))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).acceleration_mode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VoicevoxInitializeOptions),
            "::",
            stringify!(acceleration_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cpu_num_threads) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VoicevoxInitializeOptions),
            "::",
            stringify!(cpu_num_threads)
        )
    );
}
#[doc = " 音声モデルID。"]
pub type VoicevoxVoiceModelId = *const ::std::os::raw::c_char;
#[doc = " スタイルID。\n\n VOICEVOXにおける、ある<b>話者</b>(_speaker_)のある<b>スタイル</b>(_style_)を指す。"]
pub type VoicevoxStyleId = u32;
#[doc = " ::voicevox_synthesizer_synthesis のオプション。"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VoicevoxSynthesisOptions {
    #[doc = " 疑問文の調整を有効にする"]
    pub enable_interrogative_upspeak: bool,
}
#[test]
fn bindgen_test_layout_VoicevoxSynthesisOptions() {
    const UNINIT: ::std::mem::MaybeUninit<VoicevoxSynthesisOptions> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VoicevoxSynthesisOptions>(),
        1usize,
        concat!("Size of: ", stringify!(VoicevoxSynthesisOptions))
    );
    assert_eq!(
        ::std::mem::align_of::<VoicevoxSynthesisOptions>(),
        1usize,
        concat!("Alignment of ", stringify!(VoicevoxSynthesisOptions))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).enable_interrogative_upspeak) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VoicevoxSynthesisOptions),
            "::",
            stringify!(enable_interrogative_upspeak)
        )
    );
}
#[doc = " ::voicevox_synthesizer_tts のオプション。"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VoicevoxTtsOptions {
    #[doc = " 疑問文の調整を有効にする"]
    pub enable_interrogative_upspeak: bool,
}
#[test]
fn bindgen_test_layout_VoicevoxTtsOptions() {
    const UNINIT: ::std::mem::MaybeUninit<VoicevoxTtsOptions> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VoicevoxTtsOptions>(),
        1usize,
        concat!("Size of: ", stringify!(VoicevoxTtsOptions))
    );
    assert_eq!(
        ::std::mem::align_of::<VoicevoxTtsOptions>(),
        1usize,
        concat!("Alignment of ", stringify!(VoicevoxTtsOptions))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).enable_interrogative_upspeak) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VoicevoxTtsOptions),
            "::",
            stringify!(enable_interrogative_upspeak)
        )
    );
}
#[doc = " ユーザー辞書の単語。"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VoicevoxUserDictWord {
    #[doc = " 表記"]
    pub surface: *const ::std::os::raw::c_char,
    #[doc = " 読み"]
    pub pronunciation: *const ::std::os::raw::c_char,
    #[doc = " アクセント型"]
    pub accent_type: usize,
    #[doc = " 単語の種類"]
    pub word_type: VoicevoxUserDictWordType,
    #[doc = " 優先度"]
    pub priority: u32,
}
#[test]
fn bindgen_test_layout_VoicevoxUserDictWord() {
    const UNINIT: ::std::mem::MaybeUninit<VoicevoxUserDictWord> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VoicevoxUserDictWord>(),
        32usize,
        concat!("Size of: ", stringify!(VoicevoxUserDictWord))
    );
    assert_eq!(
        ::std::mem::align_of::<VoicevoxUserDictWord>(),
        8usize,
        concat!("Alignment of ", stringify!(VoicevoxUserDictWord))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).surface) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VoicevoxUserDictWord),
            "::",
            stringify!(surface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pronunciation) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VoicevoxUserDictWord),
            "::",
            stringify!(pronunciation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).accent_type) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VoicevoxUserDictWord),
            "::",
            stringify!(accent_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).word_type) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VoicevoxUserDictWord),
            "::",
            stringify!(word_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).priority) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VoicevoxUserDictWord),
            "::",
            stringify!(priority)
        )
    );
}
extern "C" {
    pub fn voicevox_open_jtalk_rc_new(
        open_jtalk_dic_dir: *const ::std::os::raw::c_char,
        out_open_jtalk: *mut *mut OpenJtalkRc,
    ) -> VoicevoxResultCode;
}
extern "C" {
    pub fn voicevox_open_jtalk_rc_use_user_dict(
        open_jtalk: *const OpenJtalkRc,
        user_dict: *const VoicevoxUserDict,
    ) -> VoicevoxResultCode;
}
extern "C" {
    pub fn voicevox_open_jtalk_rc_delete(open_jtalk: *mut OpenJtalkRc);
}
extern "C" {
    pub fn voicevox_make_default_initialize_options() -> VoicevoxInitializeOptions;
}
extern "C" {
    pub fn voicevox_get_version() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn voicevox_voice_model_new_from_path(
        path: *const ::std::os::raw::c_char,
        out_model: *mut *mut VoicevoxVoiceModel,
    ) -> VoicevoxResultCode;
}
extern "C" {
    pub fn voicevox_voice_model_id(model: *const VoicevoxVoiceModel) -> VoicevoxVoiceModelId;
}
extern "C" {
    pub fn voicevox_voice_model_get_metas_json(
        model: *const VoicevoxVoiceModel,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn voicevox_voice_model_delete(model: *mut VoicevoxVoiceModel);
}
extern "C" {
    pub fn voicevox_synthesizer_new(
        open_jtalk: *const OpenJtalkRc,
        options: VoicevoxInitializeOptions,
        out_synthesizer: *mut *mut VoicevoxSynthesizer,
    ) -> VoicevoxResultCode;
}
extern "C" {
    pub fn voicevox_synthesizer_delete(synthesizer: *mut VoicevoxSynthesizer);
}
extern "C" {
    pub fn voicevox_synthesizer_load_voice_model(
        synthesizer: *const VoicevoxSynthesizer,
        model: *const VoicevoxVoiceModel,
    ) -> VoicevoxResultCode;
}
extern "C" {
    pub fn voicevox_synthesizer_unload_voice_model(
        synthesizer: *const VoicevoxSynthesizer,
        model_id: VoicevoxVoiceModelId,
    ) -> VoicevoxResultCode;
}
extern "C" {
    pub fn voicevox_synthesizer_is_gpu_mode(synthesizer: *const VoicevoxSynthesizer) -> bool;
}
extern "C" {
    pub fn voicevox_synthesizer_is_loaded_voice_model(
        synthesizer: *const VoicevoxSynthesizer,
        model_id: VoicevoxVoiceModelId,
    ) -> bool;
}
extern "C" {
    pub fn voicevox_synthesizer_create_metas_json(
        synthesizer: *const VoicevoxSynthesizer,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn voicevox_create_supported_devices_json(
        output_supported_devices_json: *mut *mut ::std::os::raw::c_char,
    ) -> VoicevoxResultCode;
}
extern "C" {
    pub fn voicevox_synthesizer_create_audio_query_from_kana(
        synthesizer: *const VoicevoxSynthesizer,
        kana: *const ::std::os::raw::c_char,
        style_id: VoicevoxStyleId,
        output_audio_query_json: *mut *mut ::std::os::raw::c_char,
    ) -> VoicevoxResultCode;
}
extern "C" {
    pub fn voicevox_synthesizer_create_audio_query(
        synthesizer: *const VoicevoxSynthesizer,
        text: *const ::std::os::raw::c_char,
        style_id: VoicevoxStyleId,
        output_audio_query_json: *mut *mut ::std::os::raw::c_char,
    ) -> VoicevoxResultCode;
}
extern "C" {
    pub fn voicevox_synthesizer_create_accent_phrases_from_kana(
        synthesizer: *const VoicevoxSynthesizer,
        kana: *const ::std::os::raw::c_char,
        style_id: VoicevoxStyleId,
        output_accent_phrases_json: *mut *mut ::std::os::raw::c_char,
    ) -> VoicevoxResultCode;
}
extern "C" {
    pub fn voicevox_synthesizer_create_accent_phrases(
        synthesizer: *const VoicevoxSynthesizer,
        text: *const ::std::os::raw::c_char,
        style_id: VoicevoxStyleId,
        output_accent_phrases_json: *mut *mut ::std::os::raw::c_char,
    ) -> VoicevoxResultCode;
}
extern "C" {
    pub fn voicevox_synthesizer_replace_mora_data(
        synthesizer: *const VoicevoxSynthesizer,
        accent_phrases_json: *const ::std::os::raw::c_char,
        style_id: VoicevoxStyleId,
        output_accent_phrases_json: *mut *mut ::std::os::raw::c_char,
    ) -> VoicevoxResultCode;
}
extern "C" {
    pub fn voicevox_synthesizer_replace_phoneme_length(
        synthesizer: *const VoicevoxSynthesizer,
        accent_phrases_json: *const ::std::os::raw::c_char,
        style_id: VoicevoxStyleId,
        output_accent_phrases_json: *mut *mut ::std::os::raw::c_char,
    ) -> VoicevoxResultCode;
}
extern "C" {
    pub fn voicevox_synthesizer_replace_mora_pitch(
        synthesizer: *const VoicevoxSynthesizer,
        accent_phrases_json: *const ::std::os::raw::c_char,
        style_id: VoicevoxStyleId,
        output_accent_phrases_json: *mut *mut ::std::os::raw::c_char,
    ) -> VoicevoxResultCode;
}
extern "C" {
    pub fn voicevox_make_default_synthesis_options() -> VoicevoxSynthesisOptions;
}
extern "C" {
    pub fn voicevox_synthesizer_synthesis(
        synthesizer: *const VoicevoxSynthesizer,
        audio_query_json: *const ::std::os::raw::c_char,
        style_id: VoicevoxStyleId,
        options: VoicevoxSynthesisOptions,
        output_wav_length: *mut usize,
        output_wav: *mut *mut u8,
    ) -> VoicevoxResultCode;
}
extern "C" {
    pub fn voicevox_make_default_tts_options() -> VoicevoxTtsOptions;
}
extern "C" {
    pub fn voicevox_synthesizer_tts_from_kana(
        synthesizer: *const VoicevoxSynthesizer,
        kana: *const ::std::os::raw::c_char,
        style_id: VoicevoxStyleId,
        options: VoicevoxTtsOptions,
        output_wav_length: *mut usize,
        output_wav: *mut *mut u8,
    ) -> VoicevoxResultCode;
}
extern "C" {
    pub fn voicevox_synthesizer_tts(
        synthesizer: *const VoicevoxSynthesizer,
        text: *const ::std::os::raw::c_char,
        style_id: VoicevoxStyleId,
        options: VoicevoxTtsOptions,
        output_wav_length: *mut usize,
        output_wav: *mut *mut u8,
    ) -> VoicevoxResultCode;
}
extern "C" {
    pub fn voicevox_json_free(json: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn voicevox_wav_free(wav: *mut u8);
}
extern "C" {
    pub fn voicevox_error_result_to_message(
        result_code: VoicevoxResultCode,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn voicevox_user_dict_word_make(
        surface: *const ::std::os::raw::c_char,
        pronunciation: *const ::std::os::raw::c_char,
    ) -> VoicevoxUserDictWord;
}
extern "C" {
    pub fn voicevox_user_dict_new() -> *mut VoicevoxUserDict;
}
extern "C" {
    pub fn voicevox_user_dict_load(
        user_dict: *const VoicevoxUserDict,
        dict_path: *const ::std::os::raw::c_char,
    ) -> VoicevoxResultCode;
}
extern "C" {
    pub fn voicevox_user_dict_add_word(
        user_dict: *const VoicevoxUserDict,
        word: *const VoicevoxUserDictWord,
        output_word_uuid: *mut [u8; 16usize],
    ) -> VoicevoxResultCode;
}
extern "C" {
    pub fn voicevox_user_dict_update_word(
        user_dict: *const VoicevoxUserDict,
        word_uuid: *const [::std::os::raw::c_uchar; 16usize],
        word: *const VoicevoxUserDictWord,
    ) -> VoicevoxResultCode;
}
extern "C" {
    pub fn voicevox_user_dict_remove_word(
        user_dict: *const VoicevoxUserDict,
        word_uuid: *const [::std::os::raw::c_uchar; 16usize],
    ) -> VoicevoxResultCode;
}
extern "C" {
    pub fn voicevox_user_dict_to_json(
        user_dict: *const VoicevoxUserDict,
        output_json: *mut *mut ::std::os::raw::c_char,
    ) -> VoicevoxResultCode;
}
extern "C" {
    pub fn voicevox_user_dict_import(
        user_dict: *const VoicevoxUserDict,
        other_dict: *const VoicevoxUserDict,
    ) -> VoicevoxResultCode;
}
extern "C" {
    pub fn voicevox_user_dict_save(
        user_dict: *const VoicevoxUserDict,
        path: *const ::std::os::raw::c_char,
    ) -> VoicevoxResultCode;
}
extern "C" {
    pub fn voicevox_user_dict_delete(user_dict: *mut VoicevoxUserDict);
}
